services:
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile.prod
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL:-backend://backend:4000}
    ports:
      - "3000:3000"
    networks:
      - app-network
    depends_on:
      - backend

  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile.prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
    ports:
      - "4000:4000"
    networks:
      - app-network
    depends_on:
      - migrator

  migrator:
    build:
      context: .
      dockerfile: Dockerfile.migrator
    environment:
      - DATABASE_URL=${DATABASE_URL}
    networks:
      - app-network
    depends_on:
      - postgres
    command: sh -c "pnpm --filter @shared/drizzle drizzle:migrate"

  adminer:
    image: adminer:latest
    container_name: adminer
    ports:
      - "9090:8080"
    networks:
      - app-network
    depends_on:
      - postgres
    restart: unless-stopped

  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-mydb}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
